// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Logout view test should render without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogoutPage
    history={
      Object {
        "push": [MockFunction] {
          "calls": Array [
            Array [
              "/",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ToastContainer
        autoClose={5000}
        bodyClassName={null}
        className={null}
        closeButton={
          <CloseButton
            ariaLabel="close"
          />
        }
        closeOnClick={true}
        draggable={true}
        draggablePercent={80}
        hideProgressBar={false}
        newestOnTop={false}
        pauseOnFocusLoss={true}
        pauseOnHover={true}
        position="top-right"
        progressClassName={null}
        progressStyle={null}
        rtl={false}
        style={null}
        toastClassName={null}
        transition={[Function]}
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "autoClose": 5000,
        "bodyClassName": null,
        "className": null,
        "closeButton": <CloseButton
          ariaLabel="close"
        />,
        "closeOnClick": true,
        "draggable": true,
        "draggablePercent": 80,
        "hideProgressBar": false,
        "newestOnTop": false,
        "pauseOnFocusLoss": true,
        "pauseOnHover": true,
        "position": "top-right",
        "progressClassName": null,
        "progressStyle": null,
        "rtl": false,
        "style": null,
        "toastClassName": null,
        "transition": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ToastContainer
          autoClose={5000}
          bodyClassName={null}
          className={null}
          closeButton={
            <CloseButton
              ariaLabel="close"
            />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={false}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          position="top-right"
          progressClassName={null}
          progressStyle={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoClose": 5000,
          "bodyClassName": null,
          "className": null,
          "closeButton": <CloseButton
            ariaLabel="close"
          />,
          "closeOnClick": true,
          "draggable": true,
          "draggablePercent": 80,
          "hideProgressBar": false,
          "newestOnTop": false,
          "pauseOnFocusLoss": true,
          "pauseOnHover": true,
          "position": "top-right",
          "progressClassName": null,
          "progressStyle": null,
          "rtl": false,
          "style": null,
          "toastClassName": null,
          "transition": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
